// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: immessage.proto

#ifndef PROTOBUF_immessage_2eproto__INCLUDED
#define PROTOBUF_immessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_immessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsIMProto_login_msgImpl();
void InitDefaultsIMProto_login_msg();
void InitDefaultsIMProtoImpl();
void InitDefaultsIMProto();
inline void InitDefaults() {
  InitDefaultsIMProto_login_msg();
  InitDefaultsIMProto();
}
}  // namespace protobuf_immessage_2eproto
namespace improto {
class IMProto;
class IMProtoDefaultTypeInternal;
extern IMProtoDefaultTypeInternal _IMProto_default_instance_;
class IMProto_login_msg;
class IMProto_login_msgDefaultTypeInternal;
extern IMProto_login_msgDefaultTypeInternal _IMProto_login_msg_default_instance_;
}  // namespace improto
namespace improto {

enum MSG_TYPE {
  LOGIN = 0,
  MSG_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MSG_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MSG_TYPE_IsValid(int value);
const MSG_TYPE MSG_TYPE_MIN = LOGIN;
const MSG_TYPE MSG_TYPE_MAX = LOGIN;
const int MSG_TYPE_ARRAYSIZE = MSG_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSG_TYPE_descriptor();
inline const ::std::string& MSG_TYPE_Name(MSG_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSG_TYPE_descriptor(), value);
}
inline bool MSG_TYPE_Parse(
    const ::std::string& name, MSG_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSG_TYPE>(
    MSG_TYPE_descriptor(), name, value);
}
// ===================================================================

class IMProto_login_msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:improto.IMProto.login_msg) */ {
 public:
  IMProto_login_msg();
  virtual ~IMProto_login_msg();

  IMProto_login_msg(const IMProto_login_msg& from);

  inline IMProto_login_msg& operator=(const IMProto_login_msg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMProto_login_msg(IMProto_login_msg&& from) noexcept
    : IMProto_login_msg() {
    *this = ::std::move(from);
  }

  inline IMProto_login_msg& operator=(IMProto_login_msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMProto_login_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMProto_login_msg* internal_default_instance() {
    return reinterpret_cast<const IMProto_login_msg*>(
               &_IMProto_login_msg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(IMProto_login_msg* other);
  friend void swap(IMProto_login_msg& a, IMProto_login_msg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMProto_login_msg* New() const PROTOBUF_FINAL { return New(NULL); }

  IMProto_login_msg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMProto_login_msg& from);
  void MergeFrom(const IMProto_login_msg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMProto_login_msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string password = 1;
  void clear_password();
  static const int kPasswordFieldNumber = 1;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:improto.IMProto.login_msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend struct ::protobuf_immessage_2eproto::TableStruct;
  friend void ::protobuf_immessage_2eproto::InitDefaultsIMProto_login_msgImpl();
};
// -------------------------------------------------------------------

class IMProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:improto.IMProto) */ {
 public:
  IMProto();
  virtual ~IMProto();

  IMProto(const IMProto& from);

  inline IMProto& operator=(const IMProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMProto(IMProto&& from) noexcept
    : IMProto() {
    *this = ::std::move(from);
  }

  inline IMProto& operator=(IMProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMProto* internal_default_instance() {
    return reinterpret_cast<const IMProto*>(
               &_IMProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(IMProto* other);
  friend void swap(IMProto& a, IMProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMProto* New() const PROTOBUF_FINAL { return New(NULL); }

  IMProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMProto& from);
  void MergeFrom(const IMProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef IMProto_login_msg login_msg;

  // accessors -------------------------------------------------------

  // string token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // .improto.MSG_TYPE type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::improto::MSG_TYPE type() const;
  void set_type(::improto::MSG_TYPE value);

  // uint64 from = 4;
  void clear_from();
  static const int kFromFieldNumber = 4;
  ::google::protobuf::uint64 from() const;
  void set_from(::google::protobuf::uint64 value);

  // uint64 to = 5;
  void clear_to();
  static const int kToFieldNumber = 5;
  ::google::protobuf::uint64 to() const;
  void set_to(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:improto.IMProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint32 version_;
  int type_;
  ::google::protobuf::uint64 from_;
  ::google::protobuf::uint64 to_;
  mutable int _cached_size_;
  friend struct ::protobuf_immessage_2eproto::TableStruct;
  friend void ::protobuf_immessage_2eproto::InitDefaultsIMProtoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMProto_login_msg

// string password = 1;
inline void IMProto_login_msg::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMProto_login_msg::password() const {
  // @@protoc_insertion_point(field_get:improto.IMProto.login_msg.password)
  return password_.GetNoArena();
}
inline void IMProto_login_msg::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:improto.IMProto.login_msg.password)
}
#if LANG_CXX11
inline void IMProto_login_msg::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:improto.IMProto.login_msg.password)
}
#endif
inline void IMProto_login_msg::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:improto.IMProto.login_msg.password)
}
inline void IMProto_login_msg::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:improto.IMProto.login_msg.password)
}
inline ::std::string* IMProto_login_msg::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:improto.IMProto.login_msg.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMProto_login_msg::release_password() {
  // @@protoc_insertion_point(field_release:improto.IMProto.login_msg.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMProto_login_msg::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:improto.IMProto.login_msg.password)
}

// -------------------------------------------------------------------

// IMProto

// uint32 version = 1;
inline void IMProto::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 IMProto::version() const {
  // @@protoc_insertion_point(field_get:improto.IMProto.version)
  return version_;
}
inline void IMProto::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:improto.IMProto.version)
}

// .improto.MSG_TYPE type = 2;
inline void IMProto::clear_type() {
  type_ = 0;
}
inline ::improto::MSG_TYPE IMProto::type() const {
  // @@protoc_insertion_point(field_get:improto.IMProto.type)
  return static_cast< ::improto::MSG_TYPE >(type_);
}
inline void IMProto::set_type(::improto::MSG_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:improto.IMProto.type)
}

// string token = 3;
inline void IMProto::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMProto::token() const {
  // @@protoc_insertion_point(field_get:improto.IMProto.token)
  return token_.GetNoArena();
}
inline void IMProto::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:improto.IMProto.token)
}
#if LANG_CXX11
inline void IMProto::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:improto.IMProto.token)
}
#endif
inline void IMProto::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:improto.IMProto.token)
}
inline void IMProto::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:improto.IMProto.token)
}
inline ::std::string* IMProto::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:improto.IMProto.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMProto::release_token() {
  // @@protoc_insertion_point(field_release:improto.IMProto.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMProto::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:improto.IMProto.token)
}

// uint64 from = 4;
inline void IMProto::clear_from() {
  from_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IMProto::from() const {
  // @@protoc_insertion_point(field_get:improto.IMProto.from)
  return from_;
}
inline void IMProto::set_from(::google::protobuf::uint64 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:improto.IMProto.from)
}

// uint64 to = 5;
inline void IMProto::clear_to() {
  to_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IMProto::to() const {
  // @@protoc_insertion_point(field_get:improto.IMProto.to)
  return to_;
}
inline void IMProto::set_to(::google::protobuf::uint64 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:improto.IMProto.to)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace improto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::improto::MSG_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::improto::MSG_TYPE>() {
  return ::improto::MSG_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_immessage_2eproto__INCLUDED
